---
title: "Traffic Visualizations"
format: html
---

```{r}
library(tidyverse)

# loading in traffic data: 
traffic_raw <- read_csv("hw03-data/Traffic Data/Lekagul Sensor Data.csv")
```

```{r}
library(dplyr)

# change column names into better formats
traffic_clean <- traffic_raw |>
  rename(timestamp = Timestamp,
         car_id = `car-id`,
         car_type = `car-type`,
         gate_name = `gate-name`)

```

```{r}
# Define a named list of coordinates
coordinates_list <- list(
  "camping0" = c(52, 41),
  "camping1" = c(129, 50),
  "camping2" = c(44, 64),
  "camping3" = c(45, 68),
  "camping4" = c(48, 89),
  "camping5" = c(20, 121),
  "camping6" = c(150, 177),
  "camping7" = c(181, 145),
  "camping8" = c(183, 48),
  "entrance0" = c(62, 13),
  "entrance1" = c(17, 67),
  "entrance2" = c(183, 87),
  "entrance3" = c(115, 167),
  "entrance4" = c(140, 184),
  "gate0" = c(63, 33),
  "gate1" = c(58, 44),
  "gate2" = c(24, 54),
  "gate3" = c(149, 60),
  "gate4" = c(164, 114),
  "gate5" = c(131, 146),
  "gate6" = c(116, 151),
  "gate7" = c(87, 160),
  "gate8" = c(138, 181),
  "general-gate0" = c(110, 9),
  "general-gate1" = c(64, 25),
  "general-gate2" = c(104, 32),
  "general-gate3" = c(186,55),
  "general-gate4" = c(69, 98),
  "general-gate5" = c(124, 111),
  "general-gate6" = c(136, 137),
  "general-gate7" = c(65, 144),
  "ranger-base" = c(128, 175),
  "ranger-stop0" = c(89, 16),
  "ranger-stop1" = c(19, 24),
  "ranger-stop2" = c(80, 35),
  "ranger-stop3" = c(148, 45),
  "ranger-stop4" = c(18, 95),
  "ranger-stop5" = c(151, 118),
  "ranger-stop6" = c(123, 147),
  "ranger-stop7" = c(100,152)
)
```

```{r}
# Assign coordinates to the traffic dataset using mutate
traffic_clean <- traffic_clean |>
  mutate(
    coordinates = map(gate_name, ~ coordinates_list[[.x]])
  )
```

```{r}
# check if there are gates that are not assigned with an coordinate
missing_coords <- traffic_clean |>
  filter(is.null(coordinates)) |>
  select(gate_name)

if (nrow(missing_coords) > 0) {
  warning("The following gate names do not have corresponding coordinates:")
  print(missing_coords)
}
```

```{r}
# break the coordinates into x and y, later used to create visualizations
traffic_clean <- traffic_clean |> 
  mutate(
    x = map_dbl(coordinates, ~ ifelse(length(.x) == 2, .x[1], NA)),  # Assign first element as x
    y = map_dbl(coordinates, ~ ifelse(length(.x) == 2, .x[2], NA))   # Assign second element as y
  )
```

```{r}
# check if there are gates that have missing x coordinate
missing_coords <- traffic_clean |>
  filter(is.null(x)) |>
  select(gate_name)

if (nrow(missing_coords) > 0) {
  warning("The following gate names do not have corresponding x:")
  print(missing_coords)
}

# check if there are gates that have missing y coordinate
missing_coords <- traffic_clean |>
  filter(is.null(y)) |>
  select(gate_name)

if (nrow(missing_coords) > 0) {
  warning("The following gate names do not have corresponding x:")
  print(missing_coords)
}
```

```{r}
# Separate the timestamp column into date and time
traffic_clean <- traffic_clean |> 
  separate(timestamp, into = c("date", "time"), sep = " ")
```

```{r}
# Create a data frame for gates and their coordinates
gates_data <- data.frame(
  gate_name = names(coordinates_list),  # Get the names of the gates from coordinates_list
  x = sapply(coordinates_list, `[`, 1),  # Extract the first element (x coordinate) from each entry
  y = sapply(coordinates_list, `[`, 2)   # Extract the second element (y coordinate) from each entry
)

# Create the gate map using ggplot2
ggplot(gates_data, aes(x = x, y = y, label = gate_name)) +
  geom_point(color = "blue", size = 3) +  # Points for each gate
  geom_text(vjust = -1, hjust = 0.5) +  # Add text labels for the gates
  labs(title = "Map of Gates",
       x = "X Coordinate",
       y = "Y Coordinate") +
  theme_minimal() + 
  scale_y_reverse()  # Reverse the y-axis
```

```{r}
library(ggplot2)
library(viridis)

# Create the heat map using geom_bin2d
ggplot(traffic_clean, aes(x = x, y = y)) +
  geom_bin2d() +  # Create a 2D binning for the heat map
  scale_fill_viridis_c(option = "C", direction = -1) +  # Use viridis color scale
  labs(title = "Heat Map of Car Density at Each Gate Based on Coordinates",
       x = "X Coordinate",
       y = "Y Coordinate",
       fill = "Number of Cars Checked") + 
  theme_minimal() +  # Use a minimal theme for a clean look
  scale_y_reverse() +  # Reverse the y-axis to have (0,0) at the top left
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
```

```{r}
# Check for non-finite values in x and y coordinates
non_finite_rows <- traffic_clean |>
  filter(is.na(x) | is.na(y) | !is.finite(x) | !is.finite(y))

# Print the non-finite rows
if (nrow(non_finite_rows) > 0) {
  print("Rows with non-finite values in x or y:")
  print(non_finite_rows)
} else {
  print("No non-finite values found in x and y coordinates.")
}
```

```{r}
# Check for missing or non-finite values in x and y
missing_data <- traffic_clean |>
  filter(is.na(x) | is.na(y) | !is.finite(x) | !is.finite(y))

if (nrow(missing_data) > 0) {
  print("Rows with missing or non-finite values:")
  print(missing_data)
}
```

# black background
```{r}
# Load necessary packages
library(ggplot2)
library(viridis)
library(magick)
library(grid)

# Read the BMP image
bg_image <- image_read("hw03-data/Traffic Data/Lekagul Roadways.bmp")

# Convert the image to a raster object
bg_raster <- as.raster(bg_image)

# Create the heat map using geom_bin2d
heatmap <- ggplot() +  # Start ggplot without data to add background image first
  # Add the background image
  annotation_custom(rasterGrob(bg_raster, width = unit(1, "npc"), height = unit(1, "npc")),  
                    xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf) +
  # Now add the heatmap layer
  geom_bin2d(data = traffic_clean, aes(x = x, y = y), bins = 30) +  # Create a 2D binning for the heat map
  scale_fill_viridis_c(option = "C", direction = -1) +  # Use viridis color scale
  labs(title = "Heat Map of Car Density at Each Gate Based on Coordinates",
       x = "X Coordinate",
       y = "Y Coordinate",
       fill = "Number of Cars Checked") + 
  theme_minimal() +  # Use a minimal theme for a clean look
  scale_y_reverse() +  # Reverse the y-axis to have (0,0) at the top left
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels

# Print the heatmap
print(heatmap)

```

# white background
```{r}
# Load necessary packages
library(ggplot2)
library(viridis)
library(magick)
library(grid)

# Read the BMP image
bg_image <- image_read("hw03-data/Traffic Data/Lekagul Roadways.bmp")

# Invert the colors (black to white and white to black)
bg_image_inverted <- image_negate(bg_image)

# Convert the inverted image to a raster object
bg_raster <- as.raster(bg_image_inverted)

# Create the heat map using geom_bin2d
heatmap <- ggplot() +  # Start ggplot without data to add background image first
  # Add the inverted background image
  annotation_custom(rasterGrob(bg_raster, width = unit(1, "npc"), height = unit(1, "npc")),  
                    xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf) +
  # Now add the heatmap layer
  geom_bin2d(data = traffic_clean, aes(x = x, y = y)) +  # Create a 2D binning for the heat map
  scale_fill_viridis_c(option = "C", direction = -1) +  # Use viridis color scale
  labs(title = "Heat Map of Car Density at Each Gate Based on Coordinates",
       x = "X Coordinate",
       y = "Y Coordinate",
       fill = "Number of Cars Checked") + 
  theme_minimal() +  # Use a minimal theme for a clean look
  scale_y_reverse() +  # Reverse the y-axis to have (0,0) at the top left
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels

# Print the heatmap
print(heatmap)

```
