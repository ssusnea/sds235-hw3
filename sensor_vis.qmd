---
title: "Sensor Data Visualizations"
output: html
date: "2024-10-06"
---

```{r, echo = FALSE}
library(tidyverse)
library(readxl)
library(plotly)
library(ggplot2)
library(crosstalk)

meteorological <- readxl::read_xlsx("hw03-data/Sensor Data/Meteorological Data.xlsx", range = "A1:C459")

sensor <- readxl::read_xlsx("hw03-data/Sensor Data/Sensor Data.xlsx")
```


```{r, echo = FALSE}
## create the data: 

# data for the locations of the items of interest
locations <- data.frame(
  name = c("Roadrunner Fitness Electronics", "Radiance ColourTek", "Kasios Office Furniture", "Indigo Sol Boards", "1", "2", "3", "4", "5", "6", "7", "8", "9"), 
  type = c("Factory", "Factory", "Factory", "Factory", "Sensor", "Sensor", "Sensor", "Sensor", "Sensor", "Sensor", "Sensor", "Sensor", "Sensor"),
  X = c(89, 90, 109, 120, 62, 66, 76, 88, 103, 102, 89, 74, 119), 
  Y = c(27, 21, 26, 22, 21, 35, 41, 45, 43, 22, 3, 7, 42)
)

# layout the grid of the entire park 
grid <- data.frame(
  X = seq(1, 200, 1), 
  Y = seq(1, 200, 1)
)

# modify the sensor data a little 

sensor[c("Date", "Time")] <- stringr::str_split_fixed(sensor$`Date Time`, " ", 2)

sensor <- sensor |> 
  select(-Time) |> 
  group_by(Monitor, Chemical, Date) |> 
  mutate(Reading = max(Reading)) |> 
  distinct(Reading) |> 
  ungroup()

sensor <- sensor |> 
  mutate(Month = case_when(
    stringr::str_detect(Date, "-04-") ~ "April",
    stringr::str_detect(Date, "-08-") ~ "August",
    stringr::str_detect(Date, "-12-") ~ "December",
    )
  )

# sensor data with added coordinate data
sensor2 <- sensor |>
  mutate(Monitor = as.character(Monitor)) |> 
  left_join(
    locations |> filter(type == "Sensor"),
    by = join_by("Monitor" == "name")
  )


sensor_month <- sensor2 |>
  group_by(Monitor, Chemical, Month, type, X, Y) |>
  summarize(avg_reading = mean(Reading))


factory_locations <- locations |>
  filter(type == "Factory")
```



```{r}
# Create visualization of location of sensors and factories
g <- plot_ly(data = locations, x = ~X, y = ~Y, symbol = ~type, type = "scatter", mode = "markers", hoverinfo = "text", text = ~name) |> 
  layout(title = "Mapping Sensors and Factories")

highlight(
  g,
  on = "plotly_click",
  selectize = TRUE
)


# this has is relative to the entire park(?)
f <- ggplot(data = grid, aes(x = X, y = Y)) + 
  geom_point(data = locations, aes(x = X, y = Y, shape = type, color = type)) + 
  geom_text(data = locations, aes(x = X, y = Y, label = name)) + 
  # coord_cartesian(xlim = c(0, 200), ylim = c(0, 200)) + 
  theme_minimal() + 
  ggtitle("Mapping Sensors and Factories")

f <- ggplotly(f, tooltip = c("name"))
```


Create visualization of pollution readings: 
```{r}

color_palette <- c("AGOC-3A" = "blue", "Appluimonia" = "orange", "Chlorodinine" = "green", "Methylosmolene" = "red")

# present data by month:
sensor_month |>
  group_by(Chemical) |>
  group_map(~plot_ly(data=., x = ~X, y = ~Y, size = ~avg_reading, color = ~Chemical, colors = color_palette, frame = ~Month, type = "scatter", mode = "markers", hoverinfo = "text", text = ~Monitor), keep=TRUE) |>
  subplot(nrows = 2, shareX = TRUE, shareY=TRUE)

# present data by day:
sensor2 |>
  group_by(Chemical) |>
  group_map(~plot_ly(data=., x = ~X, y = ~Y, size = ~Reading, color = ~Chemical, colors = color_palette, frame = ~Date, type = "scatter", mode = "markers", hoverinfo = "text", text = ~Monitor), keep=TRUE) |>
  subplot(nrows = 2, shareX = TRUE, shareY=TRUE) |> 
  layout(title = "Pollutant Readings in Parts Per Million")
```

```{r}
# plot in the same view? 
# bscols(
#   g, pollution
# )
```

